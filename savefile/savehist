;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(ivy-history helm-M-x-input-history org-tags-history rng-tag-history search-ring org-read-date-history helm-grep-history compile-history helm-file-name-history coding-system-history gud-gud-gdb-history anzu--history query-replace-history gud-gdb-history shell-command-history buffer-name-history input-method-history extended-command-history minibuffer-history file-name-history))
(setq helm-M-x-input-history '("whi" #("face" 0 4 (font-lock-face default help-echo #("Description: highlight a sentence based on customizable face" 13 60 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc hl-sentence (20140802 920) "highlight a sentence based on customizable face" nil single "melpa" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil] tabulated-list-entry [("hl-sentence" face link follow-link t package-desc [cl-struct-package-desc hl-sentence (20140802 920) "highlight a sentence based on customizable face" nil single "melpa" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil] action package-menu-describe-package) #("20140802.920" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("highlight a sentence based on customizable face" 0 47 (font-lock-face default))])) "hl-" "highlight" "hi" "vimish-fold-de" "vimish-" "vimish-fold" "vim" #("transient-mark-mode" 0 19 (fontified t face font-lock-comment-face)) #("dark" 0 4 (fontified t)) #("light" 0 5 (fontified t)) #("respectful" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (rear-nonsticky t fontified t)) #("light" 0 4 (fontified t) 4 5 (rear-nonsticky t fontified t)) #("respectful" 0 9 (fontified t) 9 10 (rear-nonsticky t fontified t)) "ev" #("winner-mode" 0 11 (fontified t)) #("haskell-mode" 0 12 (font-lock-face bold help-echo #("Description: tab-based indentation for haskell-mode" 13 51 (font-lock-face bold)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc haskell-tab-indent (20151205 1159) "tab-based indentation for haskell-mode" nil single "melpa" nil ((:url . "https://spwhitton.name/tech/code/haskell-tab-indent/") (:keywords "indentation" "haskell")) nil] tabulated-list-entry [("haskell-tab-indent" face link follow-link t package-desc [cl-struct-package-desc haskell-tab-indent (20151205 1159) "tab-based indentation for haskell-mode" nil single "melpa" nil ((:url . "https://spwhitton.name/tech/code/haskell-tab-indent/") (:keywords "indentation" "haskell")) nil] action package-menu-describe-package) #("20151205.1159" 0 13 (font-lock-face bold)) #("new" 0 3 (font-lock-face bold)) #("melpa" 0 5 (font-lock-face bold)) #("tab-based indentation for haskell-mode" 0 38 (font-lock-face bold))])) #("跨数据库事务：2PC" 0 10 (org-category "cap-and-base" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t fontified t)) #("Basically" 0 9 (org-category "cap-and-base" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) "bu" #("Basically" 0 9 (fontified t)) #("Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。" 0 38 (face org-block font-lock-multiline t font-lock-fontified t fontified t)) #("com/cn/articles/ebay-scalability-best-practices" 0 46 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight org-no-flyspell t htmlize-link (:uri "http://www.infoq.com/cn/articles/ebay-scalability-best-practices") fontified t) 46 47 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight org-no-flyspell t htmlize-link (:uri "http://www.infoq.com/cn/articles/ebay-scalability-best-practices") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) #("+END_SRC" 0 8 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t)) #("com/cn/news/2008/03/ebaybase" 0 27 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight org-no-flyspell t htmlize-link (:uri "http://www.infoq.com/cn/news/2008/03/ebaybase") fontified t) 27 28 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight org-no-flyspell t htmlize-link (:uri "http://www.infoq.com/cn/news/2008/03/ebaybase") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t)) #("许多大型网站似乎都殊途同归，得到了同样的结论。观察到这一点是很有意思的。虽然只有几个节点的小型系统尚不需要关注这些形形色色的权衡取舍，但是eBay和亚马逊正在处理的各种问题可能已经开始在企业系统中出现了，因为这些企业系统的用户规模也正变得越来越大。" 0 80 (fontified t) 80 124 (face (whitespace-line) fontified t)) #("Architectures" 0 12 (fontified t) 12 13 (fontified t rear-nonsticky t)) #("Consistency" 0 11 (face org-block font-lock-multiline t font-lock-fontified t org-category "cap-and-base" fontified t)) #("vConsistency" 0 1 (face org-block font-lock-multiline t font-lock-fontified t fontified t) 1 12 (face org-block font-lock-multiline t font-lock-fontified t org-category "cap-and-base" fontified t)) #("做错了，就要承担后果，在大的压力都要坦然面对" 0 22 (fontified t)) #("*" 0 1 (face org-level-1 org-category "cap-and-base" fontified t)) #("这两者共同点：都是关系数据库SQL以外的可选方案，逻辑随着数据分布，任何模型都可以自己持久化，将数据处理和数据存储分离，将读和写分离，存储可以是异步或同步，取决于对一致性的要求程度。" 0 79 (org-category "cap-and-base" fontified t) 79 80 (org-category "cap-and-base" fontified t) 80 91 (org-category "cap-and-base" face (whitespace-line) fontified t)) "ediff" "edi" #("getDriverClassName" 0 18 (face font-lock-function-name-face fontified t)) "ediff-b" #("2015-11-14" 0 10 (face org-level-1 font-lock-fontified t fontified t)) #("一个人在游泳馆里，真的很舒服，可以随意的想象，随意的游泳，随意的玩" 0 33 (font-lock-fontified t fontified t)) #("就好像抽时间去读书一样，不是为了学习多少知识在人见炫耀，是为了获得内心的一种态度，不知道用什么词来形容好。" 0 6 (font-lock-fontified t fontified t) 6 53 (font-lock-fontified t fontified t)) #("这个事情可以是闭上眼睛，享受安静，可以做运动，享受一种专注，总之，一种独处，谁也给不了的惬意。" 0 47 (fontified t)) #("最近被加到了某群，没有看到什么浪漫，看到了一群拍马屁的人。都不看看自己什么水平么" 0 40 (fontified t font-lock-fontified t))))
(setq rng-tag-history '("center"))
(setq search-ring '("which-key" "info+" "which" "hl-sen" "hl-line+" "+" "hl-se" "hl-" "hl-s" "gist" "display" "dis" "auto" "auto-hi" "state" "vimish"))
(setq org-read-date-history '("   "))
(setq compile-history '("java"))
(setq helm-file-name-history '("2015-11-1.org" "index.html" "2015-11-08.org" "ailu.org" "2015-11-08.org" "2015-11-07.org" "kafka2hbase.org" "2015-11-1.html" "2015-10-31.org" "2015-10-29.org" "HelloWorld.java" "2015-10-27.org" "reflection-hack-jar.org" "fsm.org" "circuit-breaker-pattern.org" "基于zookeeper实现HA.org" "retry-design.org" "agile-dev-5p.org" "agile-dev-5p.html" "2015-10-13.org" "2015-10-10.org" "2015-10-09.html" "2015-10-08.org" "2015-10-07.org" "2015-09-06.org" "2015-09-28.org" "2015-09-22.org" "index.html" "interview-problem.org" "interview-problem.html"))
(setq coding-system-history '("utf-8" "raw-text-mac" "utf-8-hfs"))
(setq anzu--history '("d*s" "XXX" "af" "JJJJJ" "ds" "JJ" "sa" "XX" "sa"))
(setq query-replace-history '("Bigplus" "Tisoga" "0" "#N/A" "Bigplus" "Tisoga" "bigplus" "tisoga" "Bigplus" "Tisoga" "Bigplus" "Tisoga" "Bigplus" "Tisoga" "d*s" "XXX" "af" "JJJJJ" "ds" "JJ" "sa" "XX" "sa"))
(setq buffer-name-history '("init-custom.el" "emacs-custom.org" "my-init-config.el" "*Help*" "init-org.el" "abc.txt" "RdbSourceConf.java" "2015-11-23.org" "哈工大停用词表.txt" "HelloWorld.java" "xx.csv" "hbase-es-query.org" "file" "fp-demo.org" "one-huawei-interview-problem.org" "sitemap.html" "index.html" "sitemap.org" "hbase-es-query.org" "hbase-es-query.html" "bigplus.github.io/index.html" "hbase-es-indexer.html" "index.html" "*Messages*" "*helm-mode-kill-buffer*" "*Messages*" "*helm-mode-kill-buffer*" "*Messages*" "*helm-mode-dired*" "*Messages*" "*scratch*" ".emacs.d" "init.el" "*Help*" "_请先阅读我_.html"))
(setq extended-command-history '("which-key-mode" "org-indent-mode" "package-list-packages" "hl-line-mode" "highlight-current-line-minor-mode" "vimish-fold-delete" "vimish-fold-refold" "vimish-fold" "eval-buffer" "org-publish-current-file" "ediff-files" "ediff-buffers" "set-buffer-file-coding-system" "org-publish-all" "revert-buffer-with-coding-system" "whitespace-mode" "replace-string" "org-publish-project" "minimap-mode" "avy-goto-line" "ace-jump-char-mode" "avy-goto-char-2" "anzu-mode" "my-go-to-char" "rename-file" "org-mode" "minimap-update" "indent-region" "column-highlight-mode" "flash-column-highlight" "flymake-mode" "flyspell-mode" "fci-mode" "tramp-cleanup-connection" "package-menu-mark-delete" "package-refresh-contents" "list-packages" "minimap-create" "popwin:one-window" "popwin-mode" "ielm" "eww" "multiple-cursors-mode" "auto-insert" "auto-complete" "global-auto-complete-mode" "zap-to-char" "comment-region" "eshell" "edit-picture" "ace-window" "mc/mark-next-lines" "er/mark-method-call"))
(setq minibuffer-history '("freeshell" #("http" 0 4 (fontified t htmlize-link (:uri "http://emacs-fu.blogspot.jp/2011/08/customizing-mode-line.html") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)))) #("com/mrBliss/highlight-leading-spaces" 0 36 (button (t) category help-url-button help-args ("https://github.com/mrBliss/highlight-leading-spaces"))) #("--------" 0 8 (fontified t face font-lock-comment-face)) #("com/mrkkrp" 0 9 (fontified t htmlize-link (:uri "https://github.com/mrkkrp") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse))) 9 10 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "https://github.com/mrkkrp") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)))) "/Users/yp-tc-m-2505/org/emacs-custom.org" "*" "init" "/Users/yp-tc-m-2505/.emacs.d/core/" "init" "/Users/yp-tc-m-2505/.emacs.d/core/init-c" "init-" #("com/mrkkrp/zzz-to-char" 0 22 (button (t) category help-url-button help-args ("https://github.com/mrkkrp/zzz-to-char"))) "/Users/yp-tc-m-2505/.emacs.d/core/init-mode-line.el" #("smart-mode-line" 0 15 (button (t) category default-button face link follow-link t package-desc [cl-struct-package-desc smart-mode-line (20151201 637) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) nil nil "/Users/yp-tc-m-2505/.emacs.d/elpa/smart-mode-line-20151201.637" ((:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Malabarba/smart-mode-line")) nil] action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id [cl-struct-package-desc smart-mode-line (20151201 637) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) nil nil "/Users/yp-tc-m-2505/.emacs.d/elpa/smart-mode-line-20151201.637" ((:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Malabarba/smart-mode-line")) nil] tabulated-list-entry [("smart-mode-line" face link follow-link t package-desc [cl-struct-package-desc smart-mode-line (20151201 637) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) nil nil "/Users/yp-tc-m-2505/.emacs.d/elpa/smart-mode-line-20151201.637" ((:keywords "mode-line" "faces" "themes") (:url . "http://github.com/Malabarba/smart-mode-line")) nil] action package-menu-describe-package) #("20151201.637" 0 12 (font-lock-face font-lock-comment-face)) #("installed" 0 9 (font-lock-face font-lock-comment-face)) "" #("A color coded smart mode-line." 0 30 (font-lock-face font-lock-comment-face))])) "sml/apply-theme" "/Users/yp-tc-m-2505/.emacs.d/core/" "/Users/yp-tc-m-2505/org/dynamic-report.org" "/Users/yp-tc-m-2505/org/learnscala.org" "20" #("*" 0 1 (fontified t face org-level-1)) #("喜欢真实的事情，说真实的故事，像个sb一样的活着。" 0 25 (fontified t)) "2015" "201" "20" "201" #("*" 0 1 (fontified t face org-level-1)) "20" "201" "/tmp/abc.txt" "/Users/yp-tc-m-2505/" "init" "/Users/yp-tc-m-2505/Desktop/workdir/cactus/doggiex/doggiex-daportal/src/main/webapp/js/menu-table.js" "/Users/yp-tc-m-2505/org/ebay-scalability-best-practices.org" "in" "/Users/yp-tc-m-2505/org/ebay-scalability-best-practices.org" #("</li>" 0 1 (face (nxml-tag-delimiter) fontified t) 1 2 (face (nxml-tag-slash) fontified t) 2 4 (face (nxml-element-local-name) fontified t) 4 5 (face (nxml-tag-delimiter) fontified t)) "in" "/Users/yp-tc-m-2505/org/ebaybase-1.org" "/Users/yp-tc-m-2505/ebaybase-1.org" "init-or" #(">随笔2015-11-25</a></li>" 0 1 (face (nxml-tag-delimiter) fontified t) 1 11 (face (nxml-text) fontified t) 11 12 (face (nxml-text) fontified t) 12 13 (face (nxml-text) fontified t) 13 14 (face (nxml-tag-delimiter) fontified t) 14 15 (face (nxml-tag-slash) fontified t) 15 16 (face (nxml-element-local-name) fontified t) 16 17 (face (nxml-tag-delimiter) fontified t) 17 18 (face (nxml-tag-delimiter) fontified t) 18 19 (face (nxml-tag-slash) fontified t) 19 21 (face (nxml-element-local-name) fontified t) 21 22 (face (nxml-tag-delimiter) fontified t)) "/Users/yp-tc-m-2505/org/2015-11-25.org" #(">CAP原理，Base思想</li>" 0 1 (face (nxml-tag-delimiter) fontified t) 1 2 (face (nxml-text) fontified t) 2 3 (face (nxml-text) fontified t) 3 4 (face (nxml-text) fontified t) 4 5 (face (nxml-text) fontified t) 5 6 (face (nxml-text) fontified t) 6 7 (face (nxml-text) fontified t) 7 8 (face (nxml-text) fontified t) 8 9 (face (nxml-text) fontified t) 9 10 (face (nxml-text) fontified t) 10 11 (face (nxml-text) fontified t) 11 12 (face (nxml-text) fontified t) 12 13 (face (nxml-text) fontified t) 13 14 (face (nxml-tag-delimiter) fontified t) 14 15 (face (nxml-tag-slash) fontified t) 15 17 (face (nxml-element-local-name) fontified t) 17 18 (face (nxml-tag-delimiter) fontified t)) #("这两者共同点：都是关系数据库SQL以外的可选方案，逻辑随着数据分布，任何模型都可以自己持久化，将数据处理和数据存储分离，将读和写分离，存储可以是异步或同步，取决于对一致性的要求程度。" 0 79 (org-category "cap-and-base" fontified t) 79 80 (org-category "cap-and-base" fontified t) 80 91 (org-category "cap-and-base" face (whitespace-line) fontified t)) "/Users/yp-tc-m-2505/org/cap-and-base.org" "/Users/yp-tc-m-2505/org/幂等性.org"))
(setq file-name-history '("~/org/emacs-custom.org" "~/.emacs.d/core/init-mode-line.el" "~/.emacs.d/core/my-init-config.el" "~/.emacs.d/core/init-custom.el" "~/.emacs.d/core/prelude-ui.el" "~/.emacs.d/core/init-org.el" "~/org/2015-10-31.org" "~/org/2015-11-25.org" "~/org/2015-11-23.org" "~/org/2015-11-12.org" "~/org/2015-11-13.org" "~/org/2015-11-11.org" "~/org/2015-11-09.org" "~/org/2015-11-08.org" "~/org/2015-11-07.org" "~/org/2015-11-10.org" "~/org/2015-11-02.org" "~/org/2015-11-1.org" "~/.bash_history" "~/org/cap-and-base.org" "~/org/cap-and-base.org_archive" "~/Desktop/workdir/cactus/doggiex/doggiex-daportal/src/main/webapp/js/menu-table.js" "~/Desktop/opensource/bigplus.github.io/index.html" "~/org/ebay-scalability-best-practices.org" "~/org/ebaybase-1.org" "/tmp/b.org" "/tmp/a.org" "~/Desktop/workdir/reportetl/etl-extractor/src/main/java/com/yeepay/dp/etl/extract/conf/RdbSourceConf.java" "~/org/git-confilct.org" "~/org/ailu.org" "~/Desktop/org/2015-11-08.org" "~/org/kafka2hbase.org" "~/public_html/2015-11-1.html" "~/org/2015-10-29.org" "~/Desktop/opensource/robot/trunk/ChatRobot01/src/test/HelloWorld.java"))
(setq search-ring '("which-key" "info+" "which" "hl-sen" "hl-line+" "+" "hl-se" "hl-" "hl-s" "gist" "display" "dis" "auto" "auto-hi" "state" "vimish"))
(setq regexp-search-ring '("hl-s" "af"))
