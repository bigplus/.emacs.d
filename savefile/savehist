;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(ivy-history helm-M-x-input-history org-tags-history rng-tag-history search-ring org-read-date-history helm-grep-history compile-history helm-file-name-history coding-system-history gud-gud-gdb-history anzu--history query-replace-history gud-gdb-history shell-command-history buffer-name-history input-method-history extended-command-history minibuffer-history file-name-history))
(setq helm-M-x-input-history '("ev" "pa" "av" "copy" "ind" "in" "xml" "ind" "pac" "ev" "theme" "ev" "find-va" "ev" "find-va" "find-v" #("current-column" 0 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 14 (fontified t)) #("666666" 0 6 (face font-lock-string-face fontified t)) #("transparent" 0 11 (face font-lock-string-face fontified t)) #("white" 0 5 (face font-lock-string-face fontified t)) #("green" 0 5 (face font-lock-string-face fontified t)) #("red" 0 3 (face font-lock-string-face fontified t)) #("999999" 0 6 (face font-lock-string-face fontified t)) "e" #("222222" 0 6 (face font-lock-string-face fontified t)) "ev" #("035353" 0 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) "ev" "fin" "find-v" "find" "ev" "inde" "sho" "j" "e" "ev" "e" "inde" "bu" "inde" "in" "inde" "com" "indent-gui" "j" "highlig" "ind" "indent-g" "pa" "j" "json" "undo" "un" "undo" "comm" #("2" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("       " 0 7 (face org-indent)))) "mini" "sho" "minimap" "pa" "shell" "inde" "sho" "show" "pack" "inde" "show" "hide" "show" "inde" #("*" 0 1 (face org-level-1 fontified t)) "inde" "hide" "co" "comment" "comm" "packa" "region" "count" "line" "pa" "inde" #("com/94074/" 0 9 (fontified t org-no-flyspell t mouse-face highlight face org-link htmlize-link (:uri "http://blog.jobbole.com/94074/") keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse))) 9 10 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) org-no-flyspell t mouse-face highlight face org-link htmlize-link (:uri "http://blog.jobbole.com/94074/") keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)))) #("+END_SRC" 0 8 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) #("没有做检查之类的判断" 0 10 (font-lock-fontified t fontified t)) #("事情的成败就在于人，人对事情才能对，不是差一点两点，差的真的太多了。" 0 33 (fontified t) 33 34 (fontified t rear-nonsticky t)) #("人，一个人的成熟，心态的成熟，不在意年龄，而在于经历，有些经历感悟，是你看再多的书也学不到的，你好像明白了，并不代表你真的懂了。" 0 53 (fontified t font-lock-fontified t) 53 64 (fontified t font-lock-fontified t)) #("属于行为性" 0 5 (fontified t font-lock-fontified t face org-level-2)) #("sources" 0 7 (font-lock-face default help-echo #("Description: Anaconda sources for auto-complete-mode" 13 52 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-anaconda (0 1 0) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil] tabulated-list-entry [("ac-anaconda" face link follow-link t package-desc [cl-struct-package-desc ac-anaconda (0 1 0) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil] action package-menu-describe-package) #("0.1.0" 0 5 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa-stable" 0 12 (font-lock-face default)) #("Anaconda sources for auto-complete-mode" 0 39 (font-lock-face default))])) #("source" 0 6 (font-lock-face default help-echo #("Description: Auto Completion source for dcd for GNU Emacs" 13 57 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-dcd (0 4) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil] tabulated-list-entry [("ac-dcd" face link follow-link t package-desc [cl-struct-package-desc ac-dcd (0 4) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil] action package-menu-describe-package) #("0.4" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa-stable" 0 12 (font-lock-face default)) #("Auto Completion source for dcd for GNU Emacs" 0 44 (font-lock-face default))])) #("auto-complete" 0 13 (font-lock-face default help-echo #("Description: Clojure auto-complete sources using CIDER" 13 54 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] tabulated-list-entry [("ac-cider" face link follow-link t package-desc [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] action package-menu-describe-package) #("20151012.308" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Clojure auto-complete sources using CIDER" 0 41 (font-lock-face default))])) #("dabbrev" 0 7 (font-lock-face default help-echo #("Description: auto-complete.el source for dabbrev" 13 48 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-dabbrev (20130905 2218) "auto-complete.el source for dabbrev" nil single "melpa" nil nil nil] tabulated-list-entry [("ac-dabbrev" face link follow-link t package-desc [cl-struct-package-desc ac-dabbrev (20130905 2218) "auto-complete.el source for dabbrev" nil single "melpa" nil nil nil] action package-menu-describe-package) #("20130905.2218" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("auto-complete.el source for dabbrev" 0 35 (font-lock-face default))])) #("auto-complete" 0 13 (font-lock-face default help-echo #("Description: Clojure auto-complete sources using CIDER" 13 54 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] tabulated-list-entry [("ac-cider" face link follow-link t package-desc [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] action package-menu-describe-package) #("20151012.308" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Clojure auto-complete sources using CIDER" 0 41 (font-lock-face default))])) #("CIDER" 0 5 (font-lock-face default help-echo #("Description: Clojure auto-complete sources using CIDER" 13 54 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] tabulated-list-entry [("ac-cider" face link follow-link t package-desc [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] action package-menu-describe-package) #("20151012.308" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Clojure auto-complete sources using CIDER" 0 41 (font-lock-face default))])) #("auto-complete" 0 13 (font-lock-face default help-echo #("Description: auto-complete source with completion-at-point" 13 58 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-capf (20151031 1917) "auto-complete source with completion-at-point" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-capf")) nil] tabulated-list-entry [("ac-capf" face link follow-link t package-desc [cl-struct-package-desc ac-capf (20151031 1917) "auto-complete source with completion-at-point" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-capf")) nil] action package-menu-describe-package) #("20151031.1917" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("auto-complete source with completion-at-point" 0 45 (font-lock-face default))])) #("20151021" 0 8 (font-lock-face default help-echo #("Version: 20151021.349" 9 21 (font-lock-face default)) tabulated-list-column-name "Version" tabulated-list-id [cl-struct-package-desc 0blayout (20151021 349) "Layout grouping with ease" nil single "melpa" nil ((:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management")) nil] tabulated-list-entry [("0blayout" face link follow-link t package-desc [cl-struct-package-desc 0blayout (20151021 349) "Layout grouping with ease" nil single "melpa" nil ((:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management")) nil] action package-menu-describe-package) #("20151021.349" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Layout grouping with ease" 0 25 (font-lock-face default))])) #("Mode" 0 4 (font-lock-face default help-echo #("Description: CakePHP 2 Minor Mode auto-complete.el source" 13 57 (font-lock-face default)) tabulated-list-column-name "Description" tabulated-list-id [cl-struct-package-desc ac-cake2 (20140320 8) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa" nil ((:url . "http://code.101000lab.org")) nil] tabulated-list-entry [("ac-cake2" face link follow-link t package-desc [cl-struct-package-desc ac-cake2 (20140320 8) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa" nil ((:url . "http://code.101000lab.org")) nil] action package-menu-describe-package) #("20140320.8" 0 10 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("CakePHP 2 Minor Mode auto-complete.el source" 0 44 (font-lock-face default))])) #("　　打开冲突的文件，会看到类似如下的内容：" 0 21 (fontified t font-lock-fontified t font-lock-multiline t)) #("碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。" 0 3 (fontified t font-lock-fontified t font-lock-multiline t) 3 36 (fontified t font-lock-fontified t font-lock-multiline t))))
(setq rng-tag-history '("center"))
(setq search-ring '("u" "Host" "highlight-" "highlight-inde" "high" "indent-guide-face" "set" "indent-guide-face" "highlight-in" "highlight-inde" "indent-gui" "indent" "minimap" "use-packa" "indent-g" "map"))
(setq org-read-date-history '("   "))
(setq compile-history '("java"))
(setq helm-file-name-history '("abc.html" "TrxCoreBizImpl.java" "run.sh" "ebay-scalability-best-practices.org" "confluent-build.org" "how-to-code-map-red-on-hbase.org" "RestLiFortunesClient.java" ".zshrc-e" ".zshrc" "auto-fu.zsh" "ebay-scalability-best-practices.html" "settings.xml" "readme" ".zshrc" "build.sbt" "build.sbt" "my-init-config.el" "pom.xml" "build.sbt" "col-highlight.el" "init-highlight-current-line.el" "emacs-custom.org" "pom.xml" "pom.xml" "pom.xml" "init-mode-line.el" "init-custom.el" "prelude-ui.el" "init-org.el" "2015-10-31.org" "2015-11-25.org" "2015-11-23.org" "2015-11-12.org" "2015-11-13.org" "2015-11-11.org" "2015-11-09.org" "2015-11-08.org" "2015-11-07.org" "2015-11-10.org" "2015-11-02.org" "2015-11-1.org" ".bash_history" "cap-and-base.org" "cap-and-base.org_archive" "menu-table.js" "index.html" "ebaybase-1.org" "b.org" "a.org" "RdbSourceConf.java" "git-confilct.org" "ailu.org" "2015-11-08.org" "kafka2hbase.org" "2015-11-1.html" "2015-10-29.org" "HelloWorld.java"))
(setq coding-system-history '("utf-8" "raw-text-mac" "utf-8-hfs"))
(setq anzu--history '("d*s" "XXX" "af" "JJJJJ" "ds" "JJ" "sa" "XX" "sa"))
(setq query-replace-history '("" "\"" "B" "好孩子" "A" "Jerry" "好孩子" "麦粒" "y" "tt" "麦粒" "" "[*]" "[*]" "http://m2.yeepay.com" "http://172.17.102.5:8080" "Bigplus" "Tisoga" "0" "#N/A" "Bigplus" "Tisoga" "bigplus" "tisoga" "Bigplus" "Tisoga" "Bigplus" "Tisoga" "Bigplus" "Tisoga" "d*s" "XXX" "af" "JJJJJ" "ds" "JJ" "sa" "XX" "sa"))
(setq buffer-name-history '(".zshrc" "golden-ratio-20150819.420" "emacs-custom.org" "init-highlight-current-line.el" "col-highlight.el" "my-init-config.el" "init-custom.el" "emacs-custom.org" "my-init-config.el" "*Help*" "init-org.el" "abc.txt" "RdbSourceConf.java" "2015-11-23.org" "哈工大停用词表.txt" "HelloWorld.java" "xx.csv" "hbase-es-query.org" "file" "fp-demo.org" "one-huawei-interview-problem.org" "sitemap.html" "index.html" "sitemap.org" "hbase-es-query.org" "hbase-es-query.html" "bigplus.github.io/index.html" "hbase-es-indexer.html" "index.html" "*Messages*" "*helm-mode-kill-buffer*" "*Messages*" "*helm-mode-kill-buffer*" "*Messages*" "*helm-mode-dired*" "*Messages*" "*scratch*" ".emacs.d" "init.el" "*Help*" "_请先阅读我_.html"))
(setq extended-command-history '("eval-buffer" "avy-copy-line" "indent-region" "xml-mode" "indent-guide-mode" "package-list-packages" "describe-theme" "display-theme-mode" "finder-by-keyword" "find-function" "org-indent-mode" "json-mode-beautify" "indent-guide-global-mode" "comment-or-uncomment-region" "json-reformat-region" "undo-tree-visualize" "undo-tree-mode" "undo" "minimap-mode" "minimap-create" "comment-indent-new-line" "comment-region" "package-refresh-contents" "count-lines-page" "count-lines-region" "count-words-region" "org-publish-current-file" "replace-regexp" "replace-string" "vimish-fold" "eshell" "hl-line-mode" "highlight-current-line-minor-mode" "vimish-fold-delete" "vimish-fold-refold" "ediff-files" "ediff-buffers" "set-buffer-file-coding-system" "org-publish-all" "revert-buffer-with-coding-system" "whitespace-mode" "org-publish-project" "avy-goto-line" "ace-jump-char-mode" "avy-goto-char-2" "anzu-mode" "my-go-to-char" "rename-file" "org-mode" "minimap-update" "column-highlight-mode" "flash-column-highlight" "flymake-mode" "flyspell-mode" "fci-mode" "tramp-cleanup-connection" "package-menu-mark-delete" "list-packages" "popwin:one-window" "popwin-mode" "ielm" "eww" "multiple-cursors-mode" "auto-insert" "auto-complete" "global-auto-complete-mode" "zap-to-char" "edit-picture" "ace-window" "mc/mark-next-lines" "er/mark-method-call"))
(setq minibuffer-history '("/Users/yp-tc-m-2505/.emacs.d/core/init-cu" "init" #("Known" 0 5 (fontified t)) "/Users/yp-tc-m-2505/.emacs.d/elpa/indent-guide-20151119.717/" "" ":fore" "/Users/yp-tc-m-2505/.emacs.d/elpa/indent-guide-20151119.717/" ":back" "backg" "/Users/yp-tc-m-2505/.emacs.d/elpa/indent-guide-20151119.717/" "set-face-b" #("blue" 0 4 (face font-lock-string-face fontified t)) #("provide" 0 7 (fontified t face font-lock-keyword-face)) "init.el" "init" "/Users/yp-tc-m-2505/.emacs.d/core/init-g" "/Users/yp-tc-m-2505/org/sl" "/Users/yp-tc-m-2505/xbin/" #("f" 0 1 (fontified t)) "my" "init" "/Users/yp-tc-m-2505/.emacs.d/core/init-inde" "my-" #("com/antonj/Highlight-Indentation-for-Emacs" 0 42 (button (t) category help-url-button help-args ("https://github.com/antonj/Highlight-Indentation-for-Emacs"))) "indent-guide" "/Users/yp-tc-m-2505/org/slo" "/Users/yp-tc-m-2505/org/to" "/Users/yp-tc-m-2505/org/" #("private" 0 7 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face)) #("less" 0 4 (fontified t)) "/Users/yp-tc-m-2505/org/" "Quit" "~/.emacs.d/init.el" "~/Desktop/opensource/datax/target/datax/datax/bin/my.json" "/Users/yp-tc-m-2505/Desktop/opensource/datax/target/datax/datax/bin/" "/Users/h" "/Users/yp-tc-m-2505/org/composite-pattern.org" "/Users/yp-tc-m-2505/org/dynamic-proxy-patterns.org" "/Users/yp-tc-m-2505/org/singleton-design.org" "/Users/yp-tc-m-2505/Desktop/opensource/bigplus.github.io/abc.html" "/Users/yp-tc-m-2505/org/cracking-code-interview-1.1.org" "/Users/yp-tc-m-2505/Desktop/opensource/codes/zgt-service/branches/default/zgt-core/src/main/java/com/yeepay/g3/core/zgt/order/biz/impl/" "/Users/yp-tc-m-2505/Desktop/opensource/codes/zgt-service/branches/default/zgt-core/src/main/java/com/yeepay/g3/core/zgt/order/biz/" "/Users/yp-tc-m-2505/Desktop/opensource/codes/zgt-service/branches/default/zgt-core/src/main/java/com/yeepay/g3/core/zgt/biz" "/Users/yp-tc-m-2505/Desktop/opensource/codes/zgt-service/branches/default/" "/Users/yp-tc-m-2505/Desktop/opensource/codes/zgt-service/" "/Users/yp-tc-m-2505/Desktop/opensource/" "/Users/yp-tc-m-2505/org/do-what.org" "/Users/yp-tc-m-2505/org/uml-demo.org" "/Users/yp-tc-m-2505/org/2016-03-16.org" "/Users/yp-tc-m-2505/org/2015-03-14.org" "/Users/yp-tc-m-2505/org/2016-03-12.org" "/Users/yp-tc-m-2505/org/strategy-pattern.org" "/Users/yp-tc-m-2505/package com.yeepay.common.entity.posp.enums;
/**
 *  ∂©µ•Ωª“◊◊¥Ã¨
 * @author zhurong
 *
 */
public enum OrderStatus {
	/**
	 * ≥ı ºªØ / Œ¥∏∂
	 */
	INIT,
	
	/**
	 * ‘§ ⁄»®≥…π¶,“— ⁄»®
	 */
	AUTHORIZED,

	/**
	 * “—≥Â’˝
	 */
	BACKOUT,
	
	/**
	 * ≥∑œ˙
	 */
	REPEAL,
	
	/**
	 * ≥…π¶
	 */
	SUCCESS,
	
	/**
	 *  ß∞‹
	 */
	FAIL,
	
	/**
	 * “—Ω·À„
	 */
	SETTLED
	
}
package com.yeepay.common.entity.posp.enums;
/**
 *  ∂©µ•Ωª“◊◊¥Ã¨
 * @author zhurong
 *
 */
public enum OrderStatus {
	/**
	 * ≥ı ºªØ / Œ¥∏∂
	 */
	INIT,
	
	/**
	 * ‘§ ⁄»®≥…π¶,“— ⁄»®
	 */
	AUTHORIZED,

	/**
	 * “—≥Â’˝
	 */
	BACKOUT,
	
	/**
	 * ≥∑œ˙
	 */
	REPEAL,
	
	/**
	 * ≥…π¶
	 */
	SUCCESS,
	
	/**
	 *  ß∞‹
	 */
	FAIL,
	
	/**
	 * “—Ω·À„
	 */
	SETTLED
	
}
" "abc" "/Users/yp-tc-m-2505/org/print-log-tips.org" "/Users/yp-tc-m-2505/org/git-pull-conflict-merge.org" #("replace-pairs" 0 13 (tabulated-list-entry [("replace-pairs" face link follow-link t package-desc [cl-struct-package-desc replace-pairs (20160207 451) "Query-replace pairs of things" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/davidshepherd7/replace-pairs")) nil] action package-menu-describe-package) #("20160207.451" 0 12 (font-lock-face bold)) #("new" 0 3 (font-lock-face bold)) #("melpa" 0 5 (font-lock-face bold)) #("Query-replace pairs of things" 0 29 (font-lock-face bold))] tabulated-list-id [cl-struct-package-desc replace-pairs (20160207 451) "Query-replace pairs of things" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/davidshepherd7/replace-pairs")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc replace-pairs (20160207 451) "Query-replace pairs of things" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/davidshepherd7/replace-pairs")) nil] follow-link t face link category default-button button (t))) "/Users/yp-tc-m-2505/org/xxx.org" "/Users/yp-tc-m-2505/org/abc.org" "76" #("判断" 0 2 (fontified t font-lock-fontified t)) "/Users/yp-tc-m-2505/org/smart-kill.org" "/Users/yp-tc-m-2505/org/toto.org " "/Users/yp-tc-m-2505/org/todo.org" "/Users/yp-tc-m-2505/org/confluent-build.org" "71" "/Users/yp-tc-m-2505/Desktop/opensource/rest.li/examples/quickstart/client/src/main/java/com/example/fortune/RestLiFortunesClient.java" "/Users/yp-tc-m-2505/.z" "/Users/yp-tc-m-2505/.zshrc" "/Users/yp-tc-m-2505/auto-fu.zsh" "/Users/yp-tc-m-2505/.zshrc" "/Users/yp-tc-m-2505/.m2/" "ab" "/Users/yp-tc-m-2505/Desktop/opensource/bigplus.github.io/abc.html" "/Users/yp-tc-m-2505/org/2016-01-01.org" "/Users/yp-tc-m-2505/Desktop/opensource/databus/db2capture/" "/Users/yp-tc-m-2505/.emacs.d/elpa/spa" #("d/elpa/golden-ratio-20150819" 0 28 (help-args ("/Users/yp-tc-m-2505/.emacs.d/elpa/golden-ratio-20150819.420") category help-package-def-button button (t))) "/Users/yp-tc-m-2505/.emacs.d/elpa/spa" #("eval-buffer" 0 11 (helm-cand-num 11 helm-realvalue "eval-buffer" read-only nil)) "in" "/Users/yp-tc-m-2505/.emacs.d/elpa/" "/Users/yp-tc-m-2505/.emacs.d/elpa/col-highlight-20150104.2134/" "init" "/Users/yp-tc-m-2505/org/emacs" #("<dependency>" 0 1 (face (nxml-tag-delimiter) fontified t) 1 11 (face (nxml-element-local-name) fontified t) 11 12 (face (nxml-tag-delimiter) fontified t)) "init" "/Users/yp-tc-m-2505/.emacs.d/core/init-windowsize.el" "/Users/yp-tc-m-2505/Desktop/workdir/capture/po" "freeshell" #("http" 0 4 (fontified t htmlize-link (:uri "http://emacs-fu.blogspot.jp/2011/08/customizing-mode-line.html") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)))) #("com/mrBliss/highlight-leading-spaces" 0 36 (button (t) category help-url-button help-args ("https://github.com/mrBliss/highlight-leading-spaces"))) #("--------" 0 8 (fontified t face font-lock-comment-face)) #("com/mrkkrp" 0 9 (fontified t htmlize-link (:uri "https://github.com/mrkkrp") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse))) 9 10 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "https://github.com/mrkkrp") org-no-flyspell t mouse-face highlight face org-link keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)))) "/Users/yp-tc-m-2505/org/emacs-custom.org" "*" "init" "/Users/yp-tc-m-2505/.emacs.d/core/" "init"))
(setq file-name-history '("~/.emacs.d/core/init-custom.el" "~/.emacs.d/core/my-init-config.el" "/Users/yp-tc-m-2505/Desktop/opensource/bigplus.github.io/abc.html" "/Users/yp-tc-m-2505/Desktop/opensource/curator/pom.xml" "/usr/local/etc/nginx/nginx.conf" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/war/WEB-INF/classes/zoo.properties" "/usr/local/etc/nginx/nginx.conf" "/Users/yp-tc-m-2505/Desktop/apache-tomcat-7.0.47/conf/server.xml" "/usr/local/etc/nginx/nginx.conf" "/Users/yp-tc-m-2505/Desktop/apache-tomcat-7.0.47/conf/server.xml" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/war/zoo.properties" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/redis-config.properties" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/zoo.properties" "/Users/yp-tc-m-2505/Desktop/zk-server/server2/zookeeper-3.4.6/conf/zoo.cfg" "/Users/yp-tc-m-2505/Desktop/zk-server/server1/zookeeper-3.4.6/conf/zoo.cfg" "/Users/yp-tc-m-2505/Desktop/zk-server/server1/data/myid" "/Users/yp-tc-m-2505/Desktop/zk-server/server1/zookeeper-3.4.6/conf/zoo.cfg" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/zoo.properties" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/jdbc-mysql.properties" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/application.properties" "/Users/yp-tc-m-2505/Desktop/opensource/ccc/online-resources/redis-config.properties" "/Users/yp-tc-m-2505/Desktop/android-project/XCL-Charts/XCL-Charts-demo/AndroidManifest.xml" "/Users/yp-tc-m-2505/Downloads/apks/food-0/AndroidManifest.xml" "/Users/yp-tc-m-2505/Desktop/zk-server/server2/zookeeper-3.4.6/conf/zoo.cfg" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout-v17/item_analyse_report.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_detail_info.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_analyse_home.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/view_food_pop.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_collection.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_detail_info.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_food_analysis.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_analyse_home.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_food_analysis.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/view_value.xml" "/Users/yp-tc-m-2505/Downloads/apks/food/res/layout/activity_food_analysis.xml" "/Users/yp-tc-m-2505/Desktop/opensource/disconf/disconf-web/profile/rd/application.properties" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/build.gradle" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/1." "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/integration-android/build.gradle" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/wallet/project.properties" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/wallet/build.gradle" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/settings.gradle" "/Users/yp-tc-m-2505/Desktop/opensource/bitcoin-wallet/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/WeiBo/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/WeiBo/gradle.properties" "/Users/yp-tc-m-2505/Desktop/android-project/JianDan/app/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/JianDan/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/JianDan/gradle.properties" "/Users/yp-tc-m-2505/Desktop/android-project/JianDan/settings.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/wechat/WeChat For Android Studio/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/FoodCool/gradle/wrapper/gradle-wrapper.properties" "/Users/yp-tc-m-2505/Desktop/android-project/FoodCool/build.gradle" "/Users/yp-tc-m-2505/Desktop/android-project/FoodsNutrition/build.gradle" "/usr/local/bin/apktool" "/Users/yp-tc-m-2505/Downloads/apks/apk.sh" "/Users/yp-tc-m-2505/Desktop/opensource/zk-ucc/pom.xml" "/Users/yp-tc-m-2505/Desktop/opensource/zk-ucc/ucc-spring/pom.xml" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/sloth/datax/bin/rrun.sh" "/Users/yp-tc-m-2505/.zshrc" "/Users/yp-tc-m-2505/xbin/mysql.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/mysql.json" "/Users/yp-tc-m-2505/xbin/test.json" "~/.emacs.d/core/init-indent-guide.el" "~/.emacs.d/elpa/indent-guide-20151119.717/indent-guide.el" "~/Desktop/opensource/datax/target/datax/datax/bin/my.json" "~/.emacs.d/init.el" "/Users/yp-tc-m-2505/Desktop/opensource/canal/target/conf/example/instance.properties" "~/org/sloth.org" "~/xbin/mm.json" "/Users/yp-tc-m-2505/xbin/test.json" "/Users/yp-tc-m-2505/xbin/test.json" "/Users/yp-tc-m-2505/xbin/test.json" "/Users/yp-tc-m-2505/xbin/test.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/my00.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/datax.py" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/mm.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/my.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/mm.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/my.json" "/Users/yp-tc-m-2505/Desktop/opensource/DataX/target/datax/datax/bin/datax.py" "/Users/yp-tc-m-2505/xbin/datax.py" "/Users/yp-tc-m-2505/org/sloth.org" "~/org/toto.org " "~/org/2015-11-11.org" "/Users/yp-tc-m-2505/org/sloth.org" "~/.zshrc" "/Users/yp-tc-m-2505/org/binary-heap.org" "/Users/yp-tc-m-2505/.zshrc" "~/org/HBase查询设计.org" "~/org/2015-10-10.org" "~/org/2015-09-28.org" "~/Desktop/opensource/bigplus.github.io/abc.html" "~/Desktop/opensource/codes/zgt-service/branches/default/zgt-core/src/main/java/com/yeepay/g3/core/zgt/order/biz/impl/TrxCoreBizImpl.java" "~/Desktop/newchomper/run.sh" "~/org/ebay-scalability-best-practices.org" "~/org/confluent-build.org" "~/org/how-to-code-map-red-on-hbase.org" "~/Desktop/opensource/rest.li/examples/quickstart/client/src/main/java/com/example/fortune/RestLiFortunesClient.java" "~/.zshrc-e" "~/auto-fu.zsh"))
(setq search-ring '("u" "Host" "highlight-" "highlight-inde" "high" "indent-guide-face" "set" "indent-guide-face" "highlight-in" "highlight-inde" "indent-gui" "indent" "minimap" "use-packa" "indent-g" "map"))
(setq regexp-search-ring '("hl-s" "af"))
